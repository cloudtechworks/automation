AWSTemplateFormatVersion: 2010-09-09
Description: SSM document and association for installing or updating the Qualys agent
Parameters:
  ActivateSchedule:
    Type: String
    Description: "Activate the scheduled association"
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: "Must be either 'true' or 'false'"
    Default: "true"
  QualysActivationId:
    Type: String
    Description: The Qualys ActivationId that is to be used when installing the agent
  QualysAgentVersionLinux:
    Type: String
    Description: The version of the Qualys agent that is to be installed on Linux instances
    AllowedPattern: '^[0-9]*\.[0-9]*\.[0-9]*-[0-9]*$'
    ConstraintDescription: "The Linux version string needs to be in the format 'x.x.x-x'"
  QualysAgentVersionWindows:
    Type: String
    Description: The version of the Qualys agent that is to be installed on Windows instances
    AllowedPattern: '^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*$'
    ConstraintDescription: "The Windows version string needs to be in the format 'x.x.x.x'"
  QualysCustomerId:
    Type: String
    Description: The Qualys CustomerId that is to be used when installing the agent
  S3BucketName: # The name of the S3 bucket where the Qualys agent installer is stored
    Type: String
    Description: The name of the S3 bucket where the Qualys agent installer is stored
  S3FolderPath:
    Type: String
    Description: The path to the folder in the S3 bucket where the Qualys agent installer is stored
    Default: "shared/software" # Please change this to the correct path. You do not need to specify the / at the beginning and end.
Conditions:
  ActivateScheduleCondition: !Equals [!Ref ActivateSchedule, "true"]
Resources:
  QualysAgentDocument:
    Type: AWS::SSM::Document
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - E1029   # These items require no !Sub
    Properties:
      Name: "ssm-qualys-agent-install-document"
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "SSM Qualys Agent Install or Update"
        parameters:
          ActivationId:
            type: String
            description: "The Qualys ActivationId that is to be used when configuring the agent"
          CustomerId:
            type: String
            description: "The Qualys CustomerId that is to be used when configuring the agent"
          QualysAgentVersionLinux:
            type: String
            description: "The Qualys Agent version that is to be installed on Linux instances"
          QualysAgentVersionWindows:
            type: String
            description: "The Qualys Agent version that is to be installed on Windows instances"
        mainSteps:
        - name: "runQualysAgentScriptWindows"
          precondition:
            StringEquals:
            - "platformType"
            - "Windows"
          action: "aws:runPowerShellScript"
          inputs:
            timeoutSeconds: 120
            runCommand:
              - |
                Import-Module AWSPowerShell
                # The version string needs to be in the format "x.x.x.x"
                $installerVersion = "{{QualysAgentVersionWindows}}"
                $customerId="{{CustomerId}}"
                $activationId="{{ActivationId}}"
                $S3BucketName = "{{S3BucketName}}"
                $S3FolderPath = "{{S3FolderPath}}"

                $installerBasename = "QualysCloudAgent"
                $installerFilename = "$installerBasename-$installerVersion.exe"
                $installerTargetDir = "C:\Windows\Temp"
                $installer = "$installerTargetDir\$installerFilename"
                $QualysDisplayName = "Qualys Cloud Security Agent"
                $SoftwareSource = "SSM - Qualys Installer Script"

                ### FUNCTIONS ###

                # Function to initialize the Eventlog
                # This makes sure that the EventLog with Source $SourceName exists
                function Initialize-Eventlog($SourceName)
                {
                  # Check if Eventlog source exists and create if not
                  if (!([System.Diagnostics.EventLog]::SourceExists($SourceName)))
                  {
                    New-EventLog -LogName Application -Source $SourceName
                  }
                }

                # Function to retrieve information about the currently installed QualysCloudAgent version
                # The function will return the version number of the installed software, or "0.0.0.0" if not installed.
                function Get-Current-Version($installedDisplayName)
                {
                  #Define the variable to hold the location of Currently Installed Programs (version 3)
                  $UninstallKey1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
                  #Define the variable to hold the location of Currently Installed Programs (version 2)
                  $UninstallKey2 = "SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"

                  $currentInstalledVersion = Get-Version -UninstKey $uninstallKey1 -DisplayName $installedDisplayName
                  if ($currentInstalledVersion -eq "0.0.0.0") {
                    $currentInstalledVersion = Get-Version -UninstKey $uninstallKey2 -DisplayName $installedDisplayName
                  }
                  return $currentInstalledVersion
                }

                function Get-Version($UninstKey, $DisplayName)
                {
                  # The default version for "uninstalled" is set to 0.0.0.0 to accomodate the [version] type cast
                  $result = "0.0.0.0"

                  #Create an instance of the Registry Object and open the HKLM base key
                  $reg = [microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
                  #Drill down into the Uninstall key using the OpenSubKey Method
                  $regkey = $reg.OpenSubKey($UninstKey)
                  #Retrieve an array of string that contain all the subkey names
                  $subkeys = $regkey.GetSubKeyNames()

                  #Open each Subkey and use GetValue Method to return the required values for each
                  foreach ($key in $subkeys)
                  {
                    $thiskey = $UninstKey + "\\" + $key
                    $thisSubKey = $reg.OpenSubKey($thiskey)
                    if ($thisSubKey.GetValue("DisplayName") -like $DisplayName)
                    {
                      $result = $thisSubKey.GetValue("DisplayVersion")
                    }
                  }

                  return $result
                }

                function installQualysAgent{
                    Try
                    {
                      if($patch){
                        #This is an upgrade
                        Write-Host "Upgrading $QualysDisplayName version $currentVersion to $installerVersion"
                        Write-EventLog -EntryType Information -EventId 10021 -LogName Application -Message "Preparing to download and install $QualysDisplayName version $installerVersion" -Source $SoftwareSource
                        Read-S3Object -BucketName $S3BucketName -Key "$S3FolderPath/$installerFilename" -File "$installer" > $null
                        Write-Host "Upgrading Qualys Agent version $installerVersion"
                        cmd /c "$installer PatchInstall=TRUE"
                      }
                      else{
                        # This is a new installation
                        Write-Host "Downloading $QualysDisplayName version $installerVersion"
                        Write-EventLog -EntryType Information -EventId 10021 -LogName Application -Message "Preparing to download and install $QualysDisplayName version $installerVersion" -Source $SoftwareSource
                        Read-S3Object -BucketName $S3BucketName -Key "$S3FolderPath/$installerFilename" -File "$installer" > $null
                        Write-Host "Installing Qualys Agent version $installerVersion"
                        cmd /c "$installer CustomerId=$customerId ActivationId=$activationId"
                      }
                    }
                    Catch {
                      Write-EventLog -EntryType Error -EventId 10014 -LogName Application -Message "An error occured during installation of $QualysDisplayName version $installerVersion.`nInstaller: s3://S3BucketName/$S3FolderPath/$installerFilename`nLocal file: $installerTargetDir\$installerFilename`n$($_.Exception)" -Source $SoftwareSource
                      # If $currentVersion is empty the application is not installed
                      exit 1
                    }
                }

                ### BEGIN ###

                # Make sure the Eventlog is ready to receive our events
                Initialize-Eventlog($SoftwareSource)

                # Obtain the currently installed version (will be empty string if not installed)
                $currentVersion = Get-Current-Version($QualysDisplayName)
                Write-Host "Current version: $currentVersion"

                #Clearing out patch
                $patch = ""

                ### INSTALL SOFTWARE ###
                # Check if the program is already installed and the same version
                # If the program is already installed we don't need to clutter the EventLog
                # with useless messages.

                if ([version]$currentVersion -ne [version]$installerVersion) {
                  if ([version]$currentVersion -ge [version]$installerVersion) {
                    Write-EventLog -EntryType Error -EventId 10030 -LogName Application -Message "An error occured during installation of $QualysDisplayName version $installerVersion.`nThe currently installed version $currentVersion is greater than the version that is to be installed." -Source $SoftwareSource
                  Write-Host "The currently installed version $currentVersion is greater than or equal to the version that is to be installed $installerVersion."
                  }
                  elseif([version]$currentVersion -lt [version]$installerVersion -and $currentVersion.length -gt 3){
                    # If the currentVersion less than the installerVersion, a clean install needs to be performed. 
                  # For the old version the commands are a bit different..
                  Write-Host "Now attempting an upgrade"
                  $patch = "Yes"
                  installQualysAgent
                  }
                  else {
                  Write-Host "A new installation will commence"
                    # Either the application is not yet installed.
                    # Download and install the application
                    installQualysAgent
                  }
                }
        - name: "runQualysAgentScriptLinux"
          precondition:
            StringEquals:
            - "platformType"
            - "Linux"
          action: "aws:runShellScript"
          inputs:
            timeoutSeconds: 60
            runCommand:
              - |
                #!/bin/bash

                # This script is intented to be used in an SSM document for installing the
                # Qualys agent on Linux instances.

                INSTALLERVERSION="{{QualysAgentVersionLinux}}"
                CUSTOMERID="{{CustomerId}}"
                ACTIVATIONID="{{ActivationId}}"
                S3BucketName="{{S3BucketName}}"
                S3FolderPath="{{S3FolderPath}}"

                QUALYSBASENAME="qualys-cloud-agent-$INSTALLERVERSION.x86_64"
                TMPDIR="/tmp"

                # Check if the script will work on this distribution
                if hash yum 2>/dev/null; then
                  EXT=rpm
                elif hash apt-get 2>/dev/null; then
                  EXT=deb
                else
                  echo "ERROR: This script only works with YUM or APT based distributions"
                  exit 1
                fi

                # Check if the Qualys agent is already installed
                if [ "$EXT" = "deb" ]; then
                  CURRENTVERSION="$(dpkg-query -W -f='${Version}' qualys-cloud-agent 2>/dev/null)"
                  if [ "$CURRENTVERSION" = "$INSTALLERVERSION" ]; then
                    echo "Qualys Agent version $INSTALLERVERSION already installed"
                    exit 0
                  fi
                else
                  CURRENTVERSION="$(rpm -q qualys-cloud-agent --queryformat '%{PROVIDEVERSION}')"
                  if [ "$CURRENTVERSION" = "$INSTALLERVERSION" ]; then
                    echo "Qualys Agent version $INSTALLERVERSION already installed"
                    exit 0
                  fi
                fi

                PKG="$TMPDIR/$QUALYSBASENAME.$EXT"

                # Check if unzip is available
                UNZIPINSTALLED="false"
                if ! hash unzip 2>/dev/null ; then
                  # unzip not available: attempt to install
                  echo "Installing unzip"
                  if [ "$EXT" = "deb" ]; then
                  apt-get update
                  apt-get -y install unzip
                  else
                  yum -y install unzip
                  fi
                  if [ $? != 0 ]; then
                  echo "ERROR: unzip is not available on this distribution"
                  exit 1
                  fi
                  UNZIPINSTALLED="true"
                fi

                # Not all distributions have awscli installed or available in the repositories.
                # Therefore, we download the awscli v2 installer to perform our S3 download.
                # There is no need to run the install script. The AWS CLI can be used directly
                # from the installation directory. Afterwards we remove the files.
                # This will work on all distributions. No configurations will be changed.
                echo "Downloading AWSCLI zip file"
                curl --silent --show-error "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip -d $TMPDIR

                # Download the Qualys package
                $TMPDIR/aws/dist/aws s3 cp s3://$S3BucketName/$S3FolderPath/$QUALYSBASENAME.$EXT $TMPDIR/

                # Cleanup the awscli files
                rm -f awscliv2.zip
                rm -rf $TMPDIR/aws
                # Uninstall unzip if it was installed by this script
                if [ $UNZIPINSTALLED == "true" ]; then
                  echo "Removing unzip from this computer"
                  if [ "$EXT" = "deb" ]; then
                  apt-get -y remove unzip
                  else
                  yum -y remove unzip
                  fi
                  if [ $? != 0 ]; then
                  echo "WARNING: unzip could not be uninstalled"
                  exit 1
                  fi
                fi

                if [ ! -f $PKG ]; then
                  echo "ERROR: Qualys agent installer could not be downloaded from S3."
                  exit 1
                fi
                if [ -d "/usr/local/qualys/cloud-agent/" ]; then
                  # Install the package
                  echo "Updating Qualys Agent to version $INSTALLERVERSION"
                  if [ "$EXT" = "deb" ]; then
                  apt-get -y install $PKG
                  else
                  yum -y install $PKG
                  fi
                  if [ $? != 0 ]; then
                  echo "ERROR: Installation of package $PKG failed."
                  exit 1
                  fi
                  echo "Restarting the agent"
                  sudo /usr/local/qualys/cloud-agent/bin/qagent_restart.sh
                  # Remove the package file
                  rm -f $PKG
                  exit 0
                else
                  # Install the package
                  echo "installing Qualys Agent version $INSTALLERVERSION"
                  if [ "$EXT" = "deb" ]; then
                  apt-get -y install $PKG
                  else
                  yum -y install $PKG
                  fi
                  if [ $? != 0 ]; then
                  echo "ERROR: Installation of package $PKG failed."
                  exit 1
                  fi
                  # Remove the package file
                  rm -f $PKG

                  # Configure the cloud agent
                  echo "Configuring Qualys Agent"
                  /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh ActivationId=$ACTIVATIONID CustomerId=$CUSTOMERID LogLevel=5 ProviderName=AWS
                  if [ $? != 0 ]; then
                  echo "ERROR: Configuration of the Qualys cloud agent failed."
                  exit 1
                  else
                  exit 0
                  fi
                fi
  InstallQualysAssociation:
    Condition: ActivateScheduleCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: ssm-qualys-agent-install-association
      Name: !Ref QualysAgentDocument
      DocumentVersion: "$LATEST"
      ComplianceSeverity: "MEDIUM"
      Parameters:
        ActivationId: [ !Ref QualysActivationId ]
        CustomerId: [ !Ref QualysCustomerId ]
        QualysAgentVersionLinux: [ !Ref QualysAgentVersionLinux ]
        QualysAgentVersionWindows: [ !Ref QualysAgentVersionWindows ]
        S3BucketName: [ !Ref S3BucketName ]
        S3FolderPath: [ !Ref S3FolderPath ]
      # Target all all managed instances in the AWS account.
      # When the system initially creates the association, it runs the
      # association. After this initial run, the system runs the association
      # according to the schedule you specified. If you create new instances,
      # the system automatically applies the association, runs it immediately,
      # and then runs it according to the schedule.
      Targets:
      - Key: InstanceIds
        Values:
        - "*" # Target all instances
      ScheduleExpression: "rate(2 hours)"
